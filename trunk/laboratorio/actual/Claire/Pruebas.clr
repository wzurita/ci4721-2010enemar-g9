/**
 * L2Y3 es un lenguaje imperativo realizado
 *      en el laboratorio de Lenguajes 2 y 3
 * @version     $Revision: 1.1.1.1 $
 * @author      Gustavo Brice√±o <04-36771> Jesus Malledo <04-37210>
 * @since       JDK1.4
 */

class Pruebas

%start inicio

white     : "([\r\n\t (//[^\n\r]*)(/\*[^(\*/)]*\*/)]+"
|

tok213D   : "\!="
tok2626   : "\&\&"
tok3A3D   : ":="
tok3C3D   : "<="
tok3E3D   : ">="
tok3D3D   : "=="
tok7C7C   : "\|\|"
tok21     : "\!"
tok25     : "\%"
tok28     : "\("
tok29     : "\)"
tok2A     : "\*"
tok2B     : "\+"
tok2C     : "\,"
tok2D     : "\-"
tok2E     : "\."
tok2F     : "\/"
tok3B     : "\;"
tok3C     : "\<"
tok3D     : "\="
tok3E     : "\>"
tok5B     : "\["
tok5D     : "\]"
tok7B     : "\{"
tok7D     : "\}"

tokVoid   : "Void"
tokTrue   : "True"
tokFalse  : "False"
tokIf     : "If"
tokWhile  : "While"
tokElse   : "Else"
tokElseif : "Elseif"
tokFun    : "Function"
tokMain   : "Main"
tokType   : "Type"
tokUnion  : "Union"
tokIdvar  : "[$@]?[a-z][_a-zA-Z0-9]*"
tokIdtype : "[A-Z][_a-zA-Z0-9]*"
tokIdunion: "[A-Z][_a-zA-Z0-9]*"
tokIdfun  : "[A-Z][_a-zA-Z0-9]*"
tokChar   : "'[[^'](\\[([01]?[0-9]?[0-9]))(2[0-9][0-9])]]'"
tokNum    : "-?[0-9][0-9]*(.[0-9][0-9]*)?"
tokNat    : "[1-9][0-9]*"
tokString : "\"[^\"]*\""



/* complete */
programa  : defs main defs
          | main defs
          | defs main
          | main
          | defs

/* complete */
main      : tokVoid tokFun tokMain bloque

/* complete */
defs      : defs def
          | def

/* complete */
def       : defVar
          | defFun
          | defType

/* complete */
defVar    : type varAsign tok3B

/* complete */
type      : tokIdtype 
          | type tok5B tokNat tok5D
          | variante
          | registro

/* REVISAR */
variante  : tok7B defs tok7D

/* complete */
registro  : tok5B defs tok5D


/* complete */
varAsign  : tokIdvar tok2C varAsign tok2C valor
          | tokIdvar tok3A3D valor

/* complete */
defType   : tokType tokIdtype tok3D type

/* complete */
defFun    : type tokFun tokIdFun tok28 defArgs tok29 bloque

/* complete */
defArgs   : defArgs tok2C defArg
          | defArg

/* complete */
defArg    : tokIdtype tokIdvar

/* complete */
bloque    : tok7B defs cmds tok7D
          | tok7B cmds tok7D

cmds      : cmds cmd
          | cmd

cmd       : asignacion
          | funcion
          | condicion
          | iteracion

asignacion: variable tok3A3D valor tok3B

funcion   : 
condicion : tokIf tok28 exprBool tok29 bloque
          | tokIf tok28 exprBool tok29 bloque tokElse bloque

iteracion : tokwhile tok28 exprBool tok29 bloque
          : tokFor tok28 defVar exprBool tok29


valor


/* complete */
variable  : tokIdvar
          | variable tok5B exprMath tok5D
          | variable tok2E tokIdvar

/* complete */
exprMath  : number 
          | exprMath oper2Math number 
          | oper1Math number

/* complete */
oper2Math : tok2B %left 100
          | tok2D %left 100
          | tok2A %left 80
          | tok2F %left 80
          | tok25 %left 60

/* complete */
oper1Math : tok2D %left 40


/* complete */
number    : tokNum
          | variable
          | tok28 exprMath tok29
