/**********************************************************************
 * Claire a parser generator.                                         *
 * Copyright (C) 1999  Paul Pacheco <93-25642@ldc.usb.ve>             *
 *                                                                    *
 * This library is free software; you can redistribute it and/or      *
 * modify it under the terms of the GNU Lesser General Public         *
 * License as published by the Free Software Foundation; either       *
 * version 2 of the License, or (at your option) any later version.   *
 *                                                                    *
 * This library is distributed in the hope that it will be useful,    *
 * but WITHOUT ANY WARRANTY; without even the implied warranty of     *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
 * Lesser General Public License for more details.                    *
 *                                                                    *
 * You should have received a copy of the GNU Lesser General Public   *
 * License along with this library; if not, write to the Free         *
 * Software Foundation, Inc., 59 Temple Place, Suite 330,             *
 * Boston, MA  02111-1307  USA                                        *
 *                                                                    *
 * Please contact Paul Pacheco <93-25642@ldc.usb.ve> to submit any    *
 * suggestion or bug report.                                          *
 **********************************************************************/

/*
 * $Id: NormalCalc.clr,v 1.1.1.1 1999/10/31 07:47:02 Paul Exp $
 *
 * the changes to this file are
 *
 * $Log: NormalCalc.clr,v $
 * Revision 1.1.1.1  1999/10/31 07:47:02  Paul
 * Imported Claire files
 *
 * Revision 1.3  1999/09/10 02:03:41  Paul
 * fixed a bug that caused hanging with recursive macros
 *
 * Revision 1.2  1999/09/09 09:53:55  Paul
 * Added some cvs comments
 *
 */

/**
 * MacroCalc implements an example calculator , that can understand
 * prefix, infix, or postfix notation
 * @version     $Revision: 1.1.1.1 $
 * @author      Paul Pacheco <93-25642@ldc.usb.ve>
 * @since       JDK1.2
 */

class NormalCalc

%start prefijo, infijo, postfijo

white: [ "[\r\n\t ]+" ]
|

infijo: entrada
{
	System.out.println($1);
}

prefijo: prefexpr
{
	System.out.println($1);
}

postfijo: postexpr
{
	System.out.println($1);
}

<int> entrada: 

entrada "\+" entrada %left 90
{
	$$ = $1 + $3;
	
}
|
entrada "\-" entrada %left 90
{
	$$ = $1 - $3;
}
|
entrada "\*" entrada %left 80
{
	$$ = $1 * $3;
	
	//System.out.println($$);	
} 	
| entrada "/" entrada %left 80
{
	$$ = $1 / $3;
}		
| "\(" entrada "\)"
{
	$$ = $2;
}
|	"[0-9]+"
{
	$$ = Integer.parseInt($1);
}


<int> prefexpr: 
"\*" prefexpr prefexpr
{
	$$ = $2 * $3;
	
	//System.out.println($$);	
} 	
| "/" prefexpr prefexpr
{
	$$ = $2 / $3;
}
| "\+" prefexpr prefexpr
{
	$$ = $2 + $3;
	
}
| "\-" prefexpr prefexpr
{
	$$ = $2 - $3;
}
| "\(" prefexpr "\)"
{
	$$ = $2;
}
|	"[0-9]+"
{
	$$ = Integer.parseInt($1);
}


<int> postexpr: 
postexpr postexpr "\*"
{
	$$ = $1 * $2;
	
	//System.out.println($$);	
} 	
| postexpr postexpr "/"
{
	$$ = $1 / $2;
}
| postexpr postexpr "\+"
{
	$$ = $1 + $2;
	
}
| postexpr postexpr "\-"
{
	$$ = $1 - $2;
}
| "\(" postexpr "\)"
{
	$$ = $2;
}
|	"[0-9]+"
{
	$$ = Integer.parseInt($1);
}
