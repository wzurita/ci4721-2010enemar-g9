/**
 * L2Y3 es un lenguaje imperativo realizado
 *      en el laboratorio de Lenguajes 2 y 3
 * @version     $Revision: 1.1.1.1 $
 * @author      Gustavo Briceño <??-?????> Jesus Malledo <04-37210>
 * @since       JDK1.4
 */

%start inicio

white: [ "([\r\n\t (//[^\n\r]*)(/\*[^(\*/)]*\*/)]+" ]

dot_comma   : ";"
comma       : ","
asign       : ":="
open_c      : "["
close_c     : "]"
open_p      : "("
close_p     : ")"
open_l      : "{"
close_l     : "}"
math_plus   : "+"
math_minus  : "-"
math_mult   : "*"
math_div    : "/"
math_equal  : "="
great       : ">"
less        : "<"
great_equal : ">="
less_equal  : "<="
not         : "!"
bool_and    : "&&"
bool_or     : "||"
bool_equal  : "=="
true        : "true"
false       : "false"
if          : "if"
while       : "while"
else        : "else"
int         : "Int"
boolean     : "Boolean"
real        : "Real"
char        : "Char"
byte        : "Byte"
var_id      : {(a-zA-Z)(_a-zA-Z)*}
num         : (-inf, inf)




inicio        : definiciones instrucciones
              | instrucciones

definiciones  : definiciones ";" definicion
              | definicion

definicion    : var_type variables
      
variables     : variables "," var_id
              | var_id

var_type      : "Int"
              : "Boolean"
              : "Real"
              : "Char"

instrucciones : instrucciones ";" instruccion
              | instruccion

instruccion   : asignacion
              | condicional
              | iteracion
              
asignacion    : var_id ":=" expresion
              | var_id "[" math_expr "]" ":=" expresion
              
condicional   : if "(" bool_expr ")" "{" instrucciones "}"
              | if "(" bool_expr ")" "{" instrucciones "}" else "{" instrucciones "}"

iteracion     : while "(" bool_expr ")" "{" instrucciones "}"
              | while "(" bool_expr ")" "{" instrucciones "}"

expresion     : math_expr
              | bool_expr
              
math_expr     : math_expr math_oper numero
              | numero
              
numero        : num
              | var_id
              | var_id "[" MATH_EXPR "]"

MATH_OPER     -> math_plus
              -> math_minus
              -> math_mult
              -> math_div
              
BOOL_EXPR     -> BOOLEAN
              -> BOOLEAN BOOL_OPER BOOL_EXPR
              
BOOLEAN       -> true
              -> false
              -> var_id
              -> var_id open_c MATH_EXPR close_c
              -> not BOOLEAN
              -> MATH_EXPR COMP_OPER MATH_EXPR

BOOL_OPER     -> bool_and
              -> bool_or
              -> bool_equal

COMP_OPER     -> math_equal
              -> great
              -> less
              -> great_equal
              -> less_equal